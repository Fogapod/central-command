name: CI
on:
    pull_request:
        branches:
            - "*"
    push:
        branches:
            - develop

env:
    IMAGE_NAME: unitystation/central-command

jobs:
    env:
        UV_VERSION: 0.4.24

    lint:
        env:
            UV_CACHE_DIR: /tmp/.uv-cache

      runs-on: ubuntu-latest
      steps:
          - uses: actions/checkout@v4
          - name: Restore uv cache
            uses: actions/cache@v4
            with:
                path: /tmp/.uv-cache
                key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
                restore-keys: |
                    uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
                    uv-${{ runner.os }}

          - name: pre-commit cache key
            run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

          - uses: actions/cache@v4
            with:
                path: ~/.cache/pre-commit
                key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}

          - name: Set up uv
            run: curl -LsSf https://astral.sh/uv/${UV_VERSION}/install.sh | sh

          - name: Set up Python
            run: uv python install

          - name: install dependencies
            run: uv sync

          # https://github.com/typeddjango/django-stubs/issues/458
          - name: create .env file
            run: cp example.env .env

          - name: pre-commit
            run: uv run pre-commit run --all-files

          - name: Minimize uv cache
            run: uv cache prune --ci

    unit_test:
        env:
            UV_CACHE_DIR: /tmp/.uv-cache

        needs: [ lint ]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Restore uv cache
              uses: actions/cache@v4
              with:
                  path: /tmp/.uv-cache
                  key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
                  restore-keys: |
                      uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
                      uv-${{ runner.os }}

            - name: Set up uv
              run: curl -LsSf https://astral.sh/uv/${UV_VERSION}/install.sh | sh

            - name: Set up Python
              run: uv python install

            - name: install dependencies
              run: uv sync

            - name: create .env file
              run: cp example.env .env

            - name: Run tests
              env:
                  SECRET_KEY: secret
                  DB_ENGINE: django.db.backends.sqlite3
              run: |
                  cd src
                  python manage.py makemigrations --check
                  python manage.py migrate
                  python manage.py test tests/

            - name: Minimize uv cache
              run: uv cache prune --ci

    docker:
        needs: [ lint, unit_test ]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Build docker image
              run: |
                  docker pull $IMAGE_NAME
                  docker build --pull --cache-from $IMAGE_NAME -t $IMAGE_NAME:latest .

            - name: Log in into Docker Hub
              if: ${{ github.event_name == 'push' }}
              run: |
                  echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

            - name: Push image to registry
              if: ${{ github.event_name == 'push' }}
              run: |
                  docker push $IMAGE_NAME
